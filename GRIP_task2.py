# -*- coding: utf-8 -*-
"""SparkFoundation-Task-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WwtWD3rD6sTZe8AHYBlu9eokk7wzlLXC

**PREDICTION USING UNSUPERVISED LEARNING**

**Step 1** : Importing required libraries and the dataset

---
"""

#importing the required libraries

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn import datasets
from sklearn.cluster import KMeans

#This is for ignoring the warnings that may come
import warnings as wg
wg.filterwarnings("ignore")

df = pd.read_csv("/content/Task2/Iris.csv")

"""**Step 2** : Visualising the dataset"""

df.head()

df.tail()

df.shape            #It will display the number of rows and the columns present in csv file (data)

df.columns    #Determining the different columns present in the data

df['Species'].unique()

df.info()

df.describe()           #This describes various parameters like mean, standard deviation, maximum etc

"""**Step 3** : Finding the ideal number of Clusters"""

iris=pd.DataFrame(df)           #Initialising label column (species) as it is an unsupervised learning problem
iris_df= iris.drop(columns=['Species','Id'])
iris_df.head()

#Calculating within cluster sum of square
within_cluster_sum_of_square = []
clusters_range = range(1,15)
for k in clusters_range:
  km=KMeans(n_clusters=k)
  km=km.fit(iris_df)
  within_cluster_sum_of_square.append(km.inertia_)

# Plotting the within-cluster sum of square against clusters range
plt.plot(clusters_range,within_cluster_sum_of_square, 'go--', color='green')
plt.title("The elbow method")
plt.xlabel("Number of Clusters")
plt.ylabel('Within-cluster sum of square')
plt.grid()
plt.show()

"""**Step 4** : Applying the K-means Clustering on the data"""

#From this we choose number of clusters as 3
#Applying K-means Clustering on the data
from sklearn.cluster import KMeans

model=KMeans(n_clusters=3, init= 'k-means++', max_iter=300,n_init=10,random_state=0)
predictions=model.fit_predict(iris_df)
predictions

"""Step 5 : Visualizing the Clusters"""

x = iris_df.iloc[:,[0,1,2,3]].values
plt.scatter(x[predictions==0,0], x[predictions==0,1],s=25,c='blue',label='Iris-setosa')
plt.scatter(x[predictions==1,0], x[predictions==1,1],s=25,c='green',label='Iris-versicolour')
plt.scatter(x[predictions==2,0], x[predictions==2,1],s=25,c='red',label='Iris-verginica')

#Plotting the clusters centers

plt.scatter(model.cluster_centers_[:,0], model.cluster_centers_[:,1], s=100,c='yellow',label='Centroids')
plt.legend()
plt.grid()
plt.show()